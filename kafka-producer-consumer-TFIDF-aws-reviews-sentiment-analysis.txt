
val reviews = sc.textFile("aws_reviews/test.ft.txt").map(x => Array(x.slice(0,10),x.slice(11,x.size)))

val rdd = reviews.map( x => {
  val vsentiment = if (x(0) == "__label__2") "1" else "0"  // 0 = negative, 1 = positive
  Array(x(1),vsentiment)
})

rdd.cache

// remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))

// filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)

// list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)

// remove stop words
val stopwords = Set(
 "the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to", "so", "what"
)
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }

// lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }

// list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)

// remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }


def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}


val sets = rdd.randomSplit(Array(0.7,0.3))
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))

---------------------------

// import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 18).toInt
val hashingTF = new HashingTF(dim)

// transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val tf = hashingTF.transform(tokens)
tf.cache

val idf = new IDF().fit(tf)
val tfidf = idf.transform(tf)

--------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zippedTrain = trainSet.zip(tfidf)
val train = zippedTrain.map{ case(text,vector) => LabeledPoint(text(1).toDouble,vector) }
train.cache

---- MLlib SVM regression --------------

import org.apache.spark.mllib.classification.SVMWithSGD
val numIterations = 100
val model = SVMWithSGD.train(train, numIterations)

----------------------

import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe

import org.apache.spark.streaming.StreamingContext; 
import org.apache.spark.streaming.Seconds; 
import org.apache.spark.streaming.kafka010.KafkaUtils; 

val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "ubkafka:9092",
  "key.deserializer" -> classOf[StringDeserializer],
  "value.deserializer" -> classOf[StringDeserializer],
  "group.id" -> "use_a_separate_group_id_for_each_stream",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "ubkafka:9092",
  "key.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer",
  "value.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer",
  "group.id" -> "use_a_separate_group_id_for_each_stream",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val ssc = new StreamingContext(sc, Seconds(5))

val topics = Array("test")

val stream = KafkaUtils.createDirectStream[String, String](
  ssc,
  PreferConsistent,
  Subscribe[String, String](topics, kafkaParams)
)

val result = stream.map(record => (record.key, record.value))

import kfkProducerWrapper.KafkaProducerWrapper


result.foreachRDD( rdd  => {

  val brareTokens = rareTokens
  val regex = """[^0-9]*""".r
  val stopwords = Set(
 "","the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to"
)
  def tokenize(line: String): Seq[String] = {
   line.split("""\W+""")
   .map(_.toLowerCase)
   .filter(token => regex.pattern.matcher(token).matches)
   .filterNot(token => stopwords.contains(token))
   .filterNot(token => brareTokens.contains(token))
   .filter(token => token.size >= 2)
   .toSeq
  }
  
  val revCategories = Map(0.0 -> "negative", 1.0 -> "positive")
  val HashTF = hashingTF
  val IDFModel = idf
  val lrmodel = model
  
  val testSet = rdd.map(x => Array(x._2,x._1))
  val testtokens = testSet.map(x => tokenize(x(0)))
  val testTf = HashTF.transform(testtokens)
  val testTfIdf = IDFModel.transform(testTf)
  val zippedTest = testSet.zip(testTfIdf)
  zippedTest.foreachPartition( iter  => {
    KafkaProducerWrapper.brokerList = "ubkafka:9092"
    val producer = KafkaProducerWrapper.instance
    val validPredicts = iter.map{ case(text,vector) => (lrmodel.predict(vector),text) }
    validPredicts.foreach({ x => producer.send("metric", revCategories(x._1), x._2(0)) })
  })
})
 
sc.setCheckpointDir("/home/hadoop/checkpoint")

ssc.start()
